??????? ????????
??5-32?
???????? ???????? ?2


???????: 
1) ????????? ??????????? ?????? ????????? ????????? ???????? ?1 ????? ???????, ????? ?? ??? ???????? ??? ?????????? ????????????.
2) ??? ?????? ????????? ????????? ???????? ?1 ???????? ????????? ????? ? ??????????? TDD - ?????????? (3 ?????).

??? ?????????:
??? ??? ??1:
class House:
    def init(self, house_id, street_id, name):
        self.house_id = house_id
        self.street_id = street_id
        self.name = name

class Street:
    def init(self, street_id, name):
        self.street_id = street_id
        self.name = name

# ???????? ??????
houses = [
    House(1, 1, "46"),
    House(2, 1, "82"),
    House(3, 2, "3"),
    House(4, 3, "51"),
    House(5, 3, "16")
]

streets = [
    Street(1, "??????????"),
    Street(2, "??????????"),
    Street(3, "??????????")
]

# ??????? 1
result1 = [(house.name, street.name) for house in houses for street in streets if house.street_id == street.street_id]
result1.sort(key=lambda x: x[0])
print("?????? ???? ????????? ????? ? ????, ??????????????? ?? ?????:")
print(result1)

# ??????? 2
result2 = [(street.name, sum(1 for house in houses if house.street_id == street.street_id)) for street in streets]
result2.sort(key=lambda x: x[1])
print("?????? ???? ? ??????, ??????????????? ?? ?????????? ?????:")
print(result2)

# ??????? 3
result3 = [(house.name, street.name) for house in houses for street in streets if house.street_id == street.street_id and house.name.endswith("?")]
print("?????? ???? ?????, ? ??????? ???????? ????????????? ?? «?», ? ?????, ?? ??????? ??? ?????????:")
print(result3)






?????? ??? ?????????? ???????????? ??????? ???????????? __init__ , ????? ????? ???? ????????? ????????? ?????????? ??????? House ? Street.
 class House:
    def __init__(self, house_id, street_id, name):
        self.house_id = house_id
        self.street_id = street_id
        self.name = name

class Street:
    def __init__(self, street_id, name):
        self.street_id = street_id
        self.name = name

def find_houses_and_streets(houses, streets):
    return [(house.name, street.name) for house in houses for street in streets if house.street_id == street.street_id]

def count_houses_in_streets(houses, streets):
    return [(street.name, sum(1 for house in houses if house.street_id == street.street_id)) for street in streets]

def find_specific_houses(houses, streets):
    return [(house.name, street.name) for house in houses for street in streets if house.street_id == street.street_id and house.name.endswith("?")]








?????? ??? ?????? ????????? ?????? ? ??????? ??????? ??????? ????????? ????? ? ?????????????? TDD-???????????, ????? ??? unittest ??? pytest.
import unittest

class TestHousesAndStreets(unittest.TestCase):
    def setUp(self):
        self.houses = [House(1, 1, "46"), House(2, 1, "82")]
        self.streets = [Street(1, "Main Street"), Street(2, "Park Avenue")]

    def test_find_houses_and_streets(self):
        result = find_houses_and_streets(self.houses, self.streets)
        self.assertEqual(result, [("46", "Main Street"), ("82", "Main Street")])

    def test_count_houses_in_streets(self):
        result = count_houses_in_streets(self.houses, self.streets)
        self.assertEqual(result, [("Main Street", 2), ("Park Avenue", 0)])

    def test_find_specific_houses(self):
        result = find_specific_houses(self.houses, self.streets)
        self.assertEqual(result, [("46", "Main Street")])

if __name__ == '__main__':
    unittest.main()

